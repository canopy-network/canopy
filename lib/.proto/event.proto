syntax = "proto3";
package types;

option go_package = "github.com/canopy-network/canopy/lib";

message Event {
  // event_type: The type of the transaction like 'slash' or 'unstake'
  string event_type = 1; // @gotags: json:"eventType"
  // msg: The actual event message payload, which is encapsulated in a oneof format
  oneof msg {
    EventReward reward = 2;
    EventSlash slash = 3;
    EventDexLiquidityDeposit dex_liquidity_deposit = 4;
    EventDexLiquidityWithdraw dex_liquidity_withdraw = 5;
    EventDexSwap dex_swap = 6;
    EventOrderBookSwap order_book_swap = 7;
    EventAutoPause auto_pause = 8;
    EventAutoBeginUnstaking auto_begin_unstaking = 9;
    EventFinishUnstaking finish_unstaking = 10;
  }
  // height: the block height of the event
  uint64 height = 91;
  // reference: the 'begin_block' / transaction hash / 'end_block'
  string reference = 92;
  // chainId: the chain id associated with the event
  uint64 chainId = 93;
  // block_height: the number of blocks in the blockchain before a specific block, indicating its position in the chain
  // and representing the blockchain's length
  uint64 block_height = 94;  // @gotags: json:"blockHeight"
  // block_hash: a unique identifier for a block, generated by applying a cryptographic hash function to the block's contents,
  // ensuring its integrity and connecting it to the previous block in the chain.
  bytes block_hash = 95;  // @gotags: json:"blockHash"
  // address: The address of the user affected by the event
  bytes address = 96;
}

message EventReward {
  // amount: amount of reward
  uint64 amount = 1;
}

message EventSlash {
  // amount: amount of slash
  uint64 amount = 1;
}

message EventDexLiquidityDeposit {
  // amount: the deposit amount
  uint64 amount = 1;
  // local_origin: was the deposit made on this chain or the counter
  bool local_origin = 2; // @gotags: json:"localOrigin"
}

message EventDexLiquidityWithdraw {
  // local_amount: the amount of liquidity received on this chain
  uint64 local_amount = 1; // @gotags: json:"localAmount"
  // counter_amount: the amount of liquidity received on the counter chain
  uint64 remote_amount = 2; // @gotags: json:"remoteAmount"
}

message EventDexSwap {
  // sold_amount: amount sold
  uint64 sold_amount = 1; // @gotags: json:"soldAmount"
  // bought_amount: amount purchased
  uint64 bought_amount = 2; // @gotags: json:"boughtAmount"
  // local_origin: did the user sell on this chain and receive tokens on the remote chain
  bool local_origin = 3; // @gotags: json:"localOrigin"
  // success: did the swap succeed
  bool success = 4; // @gotags: json:"success"
}

message EventOrderBookSwap {
  // sold_amount: amount sold
  uint64 sold_amount = 1; // @gotags: json:"soldAmount"
  // bought_amount: amount purchased
  uint64 bought_amount = 2; // @gotags: json:"boughtAmount"
  // data: a generic data field which can allow a committee to execute specific functionality for the swap
  bytes data = 3; // @gotags: json:"data"
  // sellers_receive_address: the address of the seller where the 'counter asset' will be received
  bytes SellerReceiveAddress = 4; // @gotags: json:"sellerReceiveAddress"
  // buyer_send_address: the address of the buyer where the 'counter asset' will be sent from
  bytes BuyerSendAddress = 5; // @gotags: json:"sellerReceiveAddress"
  // sellers_send_address: the Canopy address the seller is selling and signing from
  bytes SellersSendAddress = 6; // @gotags: json:"sellersSendAddress"
  // OrderId: auto-populated by the state machine to assign the unique bytes to the order
  bytes OrderId = 7;  // @gotags: json:"orderId"
}

message EventAutoPause {}

message EventAutoBeginUnstaking {}

message EventFinishUnstaking {}