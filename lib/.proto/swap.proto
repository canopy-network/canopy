syntax = "proto3";
package types;

option go_package = "github.com/canopy-network/canopy/lib";

// *****************************************************************************************************
// This file is auto-generated from source files in `/lib/.proto/*` using Protocol Buffers (protobuf)
//
// Protobuf is a language-neutral, platform-neutral serialization format. It allows users
// to define objects in a way that’s both efficient to store and fast to transmit over the network.
// These definitions are compiled into code that *enables different systems and programming languages
// to communicate in a byte-perfect manner*
//
// To update these structures, make changes to the source .proto files, then recompile
// to regenerate this file.
// These auto-generated files are easily recognized by checking for a `.pb.go` ending
// *****************************************************************************************************
//_
//_
//_
// SWAP PROTOCOL: Facilitates a token swap between Bob (with Token A) and Alice (with Token B).
// The committee oversees the process while controlling Blockchain A and observing Blockchain B.
//
// 1. Bob creates a 'SellOrder' with the amount of "Token A" he wants to sell, the 'exchange rate', and his
//   'Token B address'. Token A is escrowed in a committee-controlled address. Bob can reverse this order by submitting
//    a transaction on Blockchain A.
//
// 2. Alice accepts Bob's offer by sending a transaction on Blockchain B, referencing Bob’s offer hash and providing her
//    'Token A address' in the memo field.
//
// 3. The committee updates the recipient of Bob’s sell order to Alice’s "Token A" address, verifying that Alice has
//    enough "aged Token B" in her Blockchain B address.
//
// 4. Alice sends "Token B" to Bob, with a memo linking to the 'Request to Sell'.
//
// 5. The committee witnesses Alice’s transaction and releases Bob’s "Token A" to Alice.
//
// 6. If Alice does not send "Token B" within N Blockchain B blocks, the committee resets Bob’s 'Request to Sell'
//    recipient.
//
//
// SellOrder is a structure that holds relevant data to complete a token swap. It's created by a 'request to sell'
// then populated by an 'intent to buy', and finally closed when the committee witnesses the transfer of funds.
message SellOrder {
  // id: the unique identifier of the order
  bytes Id = 1; // @gotags: json:"id"
  // committee: the id of the committee that is in-charge of escrow for the swap
  uint64 Committee = 2; // @gotags: json:"committee"
  // data: a generic data field which can allow a committee to execute specific functionality for the swap
  bytes Data = 3; // @gotags: json:"data"
  // amount_for_sale: amount of CNPY for sale
  uint64 AmountForSale = 4; // @gotags: json:"amountForSale"
  // requested_amount: amount of 'counter-asset' to receive
  uint64 RequestedAmount = 5; // @gotags: json:"requestedAmount"
  // seller_receive_address: the external chain address to receive the 'counter-asset'
  bytes SellerReceiveAddress = 6; // @gotags: json:"sellerReceiveAddress"
  // buyer_send_address: the address the buyer will be transferring the funds from
  bytes BuyerSendAddress = 7; // @gotags: json:"buyerSendAddress"
  // buyer_receive_address: the buyer Canopy address to receive the CNPY
  bytes BuyerReceiveAddress = 8; // @gotags: json:"buyerReceiveAddress"
  // buyer_chain_deadline: the external chain height deadline to send the 'tokens' to SellerReceiveAddress
  uint64 BuyerChainDeadline = 9; // @gotags: json:"buyerChainDeadline"
  // sellers_send_address: the signing address of seller who is selling the CNPY
  bytes SellersSendAddress = 10; // @gotags: json:"sellersSendAddress"
}

// OrderBooks: is a list of order book objects held in the blockchain state
message OrderBooks {
  // OrderBooks: the actual list of order book objects
  repeated OrderBook OrderBooks = 1; // @gotags: json:"orderBooks"
}

// OrderBook: a list of sell orders associated with a particular committee held in the blockchain state
message OrderBook {
  // chain_id: the unique identifier of the 'counter asset' committee
  uint64 chainId = 1 ; // @gotags: json:"chainID"
  // orders: the actual list of sell orders
  repeated SellOrder orders = 2;
}