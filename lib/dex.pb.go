// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dex.proto

package lib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DexLimitOrder is the core structure holding AMM token swap data - created when user submits intent, processed
// through cross-chain validation, and resolved when both chains confirm the atomic swap completion.
type DexLimitOrder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// amount_for_sale: amount of asset for sale
	AmountForSale uint64 `protobuf:"varint,1,opt,name=AmountForSale,proto3" json:"amountForSale"` // @gotags: json:"amountForSale"
	// requested_amount: the minimum requested amount of 'counter-asset' to receive
	RequestedAmount uint64 `protobuf:"varint,2,opt,name=RequestedAmount,proto3" json:"requestedAmount"` // @gotags: json:"requestedAmount"
	// address: the address where the funds are transferred from and to
	Address       []byte `protobuf:"bytes,3,opt,name=Address,proto3" json:"address"` // @gotags: json:"address"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexLimitOrder) Reset() {
	*x = DexLimitOrder{}
	mi := &file_dex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexLimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexLimitOrder) ProtoMessage() {}

func (x *DexLimitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexLimitOrder.ProtoReflect.Descriptor instead.
func (*DexLimitOrder) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{0}
}

func (x *DexLimitOrder) GetAmountForSale() uint64 {
	if x != nil {
		return x.AmountForSale
	}
	return 0
}

func (x *DexLimitOrder) GetRequestedAmount() uint64 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *DexLimitOrder) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// DexBatch is a group of limit orders that must be processed atomically
type DexBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// committee: the id of the 'counter asset'
	Committee uint64 `protobuf:"varint,1,opt,name=Committee,proto3" json:"committee"` // @gotags: json:"committee"
	// orders: the list of dex limit orders
	Orders []*DexLimitOrder `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders"` // @gotags: json:"orders"
	// poolSize: contains the current balance of the liquidity pool
	PoolSize uint64 `protobuf:"varint,3,opt,name=pool_size,json=poolSize,proto3" json:"poolSize"` // @gotags: json:"poolSize"
	// receipts: the list of order success status's
	Receipts      []bool `protobuf:"varint,4,rep,packed,name=receipts,proto3" json:"receipts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexBatch) Reset() {
	*x = DexBatch{}
	mi := &file_dex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexBatch) ProtoMessage() {}

func (x *DexBatch) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexBatch.ProtoReflect.Descriptor instead.
func (*DexBatch) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{1}
}

func (x *DexBatch) GetCommittee() uint64 {
	if x != nil {
		return x.Committee
	}
	return 0
}

func (x *DexBatch) GetOrders() []*DexLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *DexBatch) GetPoolSize() uint64 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *DexBatch) GetReceipts() []bool {
	if x != nil {
		return x.Receipts
	}
	return nil
}

var File_dex_proto protoreflect.FileDescriptor

const file_dex_proto_rawDesc = "" +
	"\n" +
	"\tdex.proto\x12\x05types\"y\n" +
	"\rDexLimitOrder\x12$\n" +
	"\rAmountForSale\x18\x01 \x01(\x04R\rAmountForSale\x12(\n" +
	"\x0fRequestedAmount\x18\x02 \x01(\x04R\x0fRequestedAmount\x12\x18\n" +
	"\aAddress\x18\x03 \x01(\fR\aAddress\"\x8f\x01\n" +
	"\bDexBatch\x12\x1c\n" +
	"\tCommittee\x18\x01 \x01(\x04R\tCommittee\x12,\n" +
	"\x06orders\x18\x02 \x03(\v2\x14.types.DexLimitOrderR\x06orders\x12\x1b\n" +
	"\tpool_size\x18\x03 \x01(\x04R\bpoolSize\x12\x1a\n" +
	"\breceipts\x18\x04 \x03(\bR\breceiptsB&Z$github.com/canopy-network/canopy/libb\x06proto3"

var (
	file_dex_proto_rawDescOnce sync.Once
	file_dex_proto_rawDescData []byte
)

func file_dex_proto_rawDescGZIP() []byte {
	file_dex_proto_rawDescOnce.Do(func() {
		file_dex_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dex_proto_rawDesc), len(file_dex_proto_rawDesc)))
	})
	return file_dex_proto_rawDescData
}

var file_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dex_proto_goTypes = []any{
	(*DexLimitOrder)(nil), // 0: types.DexLimitOrder
	(*DexBatch)(nil),      // 1: types.DexBatch
}
var file_dex_proto_depIdxs = []int32{
	0, // 0: types.DexBatch.orders:type_name -> types.DexLimitOrder
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dex_proto_init() }
func file_dex_proto_init() {
	if File_dex_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dex_proto_rawDesc), len(file_dex_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dex_proto_goTypes,
		DependencyIndexes: file_dex_proto_depIdxs,
		MessageInfos:      file_dex_proto_msgTypes,
	}.Build()
	File_dex_proto = out.File
	file_dex_proto_goTypes = nil
	file_dex_proto_depIdxs = nil
}
