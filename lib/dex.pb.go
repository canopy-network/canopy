// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dex.proto

package lib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DexLimitOrder is the core structure holding AMM token swap data - created when user submits intent, processed
// through cross-chain validation, and resolved when both chains confirm the atomic swap completion.
type DexLimitOrder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id: the unique identifier of the order
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"id"` // @gotags: json:"id"
	// committee: the id of the 'counter asset'
	Committee uint64 `protobuf:"varint,2,opt,name=Committee,proto3" json:"committee"` // @gotags: json:"committee"
	// amount_for_sale: amount of asset for sale
	AmountForSale uint64 `protobuf:"varint,3,opt,name=AmountForSale,proto3" json:"amountForSale"` // @gotags: json:"amountForSale"
	// requested_amount: the minimum requested amount of 'counter-asset' to receive
	RequestedAmount uint64 `protobuf:"varint,4,opt,name=RequestedAmount,proto3" json:"requestedAmount"` // @gotags: json:"requestedAmount"
	// address: the address where the funds are transferred from and to
	Address []byte `protobuf:"bytes,5,opt,name=Address,proto3" json:"address"` // @gotags: json:"address"
	// batch_id: the identifier of the 'batch' that must be fully processed before evicting this limit order from state
	BatchId       uint64 `protobuf:"varint,6,opt,name=batch_id,json=batchId,proto3" json:"batchId"` // @gotags: json:"batchId"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexLimitOrder) Reset() {
	*x = DexLimitOrder{}
	mi := &file_dex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexLimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexLimitOrder) ProtoMessage() {}

func (x *DexLimitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexLimitOrder.ProtoReflect.Descriptor instead.
func (*DexLimitOrder) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{0}
}

func (x *DexLimitOrder) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DexLimitOrder) GetCommittee() uint64 {
	if x != nil {
		return x.Committee
	}
	return 0
}

func (x *DexLimitOrder) GetAmountForSale() uint64 {
	if x != nil {
		return x.AmountForSale
	}
	return 0
}

func (x *DexLimitOrder) GetRequestedAmount() uint64 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *DexLimitOrder) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DexLimitOrder) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

// DexReceipt is the state entry that is created when funds are distributed from a liquidity pool
type DexReceipt struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id: the unique identifier of the order
	Id []byte `protobuf:"bytes,1,opt,name=Id,proto3" json:"id"` // @gotags: json:"id"
	// committee: the id of the 'counter asset'
	Committee uint64 `protobuf:"varint,2,opt,name=Committee,proto3" json:"committee"` // @gotags: json:"committee"
	// batch_id: the identifier of the 'batch' that must be fully processed before evicting this limit order from state
	BatchId uint64 `protobuf:"varint,3,opt,name=batch_id,json=batchId,proto3" json:"batchId"` // @gotags: json:"batchId"
	// success: true if the funds were transferred from the pool, otherwise false
	Success       bool `protobuf:"varint,4,opt,name=success,proto3" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexReceipt) Reset() {
	*x = DexReceipt{}
	mi := &file_dex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexReceipt) ProtoMessage() {}

func (x *DexReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexReceipt.ProtoReflect.Descriptor instead.
func (*DexReceipt) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{1}
}

func (x *DexReceipt) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DexReceipt) GetCommittee() uint64 {
	if x != nil {
		return x.Committee
	}
	return 0
}

func (x *DexReceipt) GetBatchId() uint64 {
	if x != nil {
		return x.BatchId
	}
	return 0
}

func (x *DexReceipt) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_dex_proto protoreflect.FileDescriptor

const file_dex_proto_rawDesc = "" +
	"\n" +
	"\tdex.proto\x12\x05types\"\xc2\x01\n" +
	"\rDexLimitOrder\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\fR\x02Id\x12\x1c\n" +
	"\tCommittee\x18\x02 \x01(\x04R\tCommittee\x12$\n" +
	"\rAmountForSale\x18\x03 \x01(\x04R\rAmountForSale\x12(\n" +
	"\x0fRequestedAmount\x18\x04 \x01(\x04R\x0fRequestedAmount\x12\x18\n" +
	"\aAddress\x18\x05 \x01(\fR\aAddress\x12\x19\n" +
	"\bbatch_id\x18\x06 \x01(\x04R\abatchId\"o\n" +
	"\n" +
	"DexReceipt\x12\x0e\n" +
	"\x02Id\x18\x01 \x01(\fR\x02Id\x12\x1c\n" +
	"\tCommittee\x18\x02 \x01(\x04R\tCommittee\x12\x19\n" +
	"\bbatch_id\x18\x03 \x01(\x04R\abatchId\x12\x18\n" +
	"\asuccess\x18\x04 \x01(\bR\asuccessB&Z$github.com/canopy-network/canopy/libb\x06proto3"

var (
	file_dex_proto_rawDescOnce sync.Once
	file_dex_proto_rawDescData []byte
)

func file_dex_proto_rawDescGZIP() []byte {
	file_dex_proto_rawDescOnce.Do(func() {
		file_dex_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dex_proto_rawDesc), len(file_dex_proto_rawDesc)))
	})
	return file_dex_proto_rawDescData
}

var file_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_dex_proto_goTypes = []any{
	(*DexLimitOrder)(nil), // 0: types.DexLimitOrder
	(*DexReceipt)(nil),    // 1: types.DexReceipt
}
var file_dex_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dex_proto_init() }
func file_dex_proto_init() {
	if File_dex_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dex_proto_rawDesc), len(file_dex_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dex_proto_goTypes,
		DependencyIndexes: file_dex_proto_depIdxs,
		MessageInfos:      file_dex_proto_msgTypes,
	}.Build()
	File_dex_proto = out.File
	file_dex_proto_goTypes = nil
	file_dex_proto_depIdxs = nil
}
