// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: dex.proto

package lib

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DexLimitOrder is the core structure holding AMM token swap data - created when user submits intent, processed
// through cross-chain validation, and resolved when both chains confirm the atomic swap completion.
type DexLimitOrder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// amount_for_sale: amount of asset for sale
	AmountForSale uint64 `protobuf:"varint,1,opt,name=amountForSale,proto3" json:"amountForSale"` // @gotags: json:"amountForSale"
	// requested_amount: the minimum requested amount of 'counter-asset' to receive
	RequestedAmount uint64 `protobuf:"varint,2,opt,name=requestedAmount,proto3" json:"requestedAmount"` // @gotags: json:"requestedAmount"
	// address: the address where the funds are transferred from and to
	Address       []byte `protobuf:"bytes,3,opt,name=address,proto3" json:"address"` // @gotags: json:"address"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexLimitOrder) Reset() {
	*x = DexLimitOrder{}
	mi := &file_dex_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexLimitOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexLimitOrder) ProtoMessage() {}

func (x *DexLimitOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexLimitOrder.ProtoReflect.Descriptor instead.
func (*DexLimitOrder) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{0}
}

func (x *DexLimitOrder) GetAmountForSale() uint64 {
	if x != nil {
		return x.AmountForSale
	}
	return 0
}

func (x *DexLimitOrder) GetRequestedAmount() uint64 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *DexLimitOrder) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// DexLiquidityDeposit a liquidity deposit command
type DexLiquidityDeposit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// address: the address where the funds are deposited from
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// amount: the amount of the deposit
	Amount        uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexLiquidityDeposit) Reset() {
	*x = DexLiquidityDeposit{}
	mi := &file_dex_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexLiquidityDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexLiquidityDeposit) ProtoMessage() {}

func (x *DexLiquidityDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexLiquidityDeposit.ProtoReflect.Descriptor instead.
func (*DexLiquidityDeposit) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{1}
}

func (x *DexLiquidityDeposit) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DexLiquidityDeposit) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// DexLiquidityWithdraw a liquidity withdraw command
type DexLiquidityWithdraw struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// address: the address where the funds are withdrawn to
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// percent: the percent of points being withdrawn
	Percent       uint64 `protobuf:"varint,2,opt,name=percent,proto3" json:"percent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexLiquidityWithdraw) Reset() {
	*x = DexLiquidityWithdraw{}
	mi := &file_dex_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexLiquidityWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexLiquidityWithdraw) ProtoMessage() {}

func (x *DexLiquidityWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexLiquidityWithdraw.ProtoReflect.Descriptor instead.
func (*DexLiquidityWithdraw) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{2}
}

func (x *DexLiquidityWithdraw) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DexLiquidityWithdraw) GetPercent() uint64 {
	if x != nil {
		return x.Percent
	}
	return 0
}

// DexBatch is a group of limit orders that must be processed atomically
type DexBatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// committee: the id of the 'counter asset'
	Committee uint64 `protobuf:"varint,1,opt,name=Committee,proto3" json:"committee"` // @gotags: json:"committee"
	// receipt_hash: the hash of the counter chain batch that the receipts correspond to
	ReceiptHash []byte `protobuf:"bytes,2,opt,name=receipt_hash,json=receiptHash,proto3" json:"receiptHash"` // @gotags: json:"receiptHash"
	// orders: the list of dex limit orders
	Orders []*DexLimitOrder `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders"` // @gotags: json:"orders"
	// deposits: the liquidity provider 'deposit' command
	Deposits []*DexLiquidityDeposit `protobuf:"bytes,4,rep,name=deposits,proto3" json:"deposits,omitempty"`
	// withdraws: the liquidity provider 'withdraw' command
	Withdraws []*DexLiquidityWithdraw `protobuf:"bytes,5,rep,name=withdraws,proto3" json:"withdraws,omitempty"`
	// pool_size: contains the current balance of the liquidity pool
	PoolSize uint64 `protobuf:"varint,6,opt,name=pool_size,json=poolSize,proto3" json:"poolSize"` // @gotags: json:"poolSize"
	// pool_points: (typically omitted due to LP mirrored design) - contains the current liquidity points of the pool
	PoolPoints []*PoolPoints `protobuf:"bytes,7,rep,name=pool_points,json=poolPoints,proto3" json:"poolPoints"` // @gotags: json:"poolPoints"
	// total_pool_points: (typically omitted due to LP mirrored design)  - contains the current liquidity points of the pool
	TotalPoolPoints uint64 `protobuf:"varint,8,opt,name=total_pool_points,json=totalPoolPoints,proto3" json:"totalPoolPoints"` // @gotags: json:"totalPoolPoints"
	// receipts: the list of order success status's
	Receipts []bool `protobuf:"varint,9,rep,packed,name=receipts,proto3" json:"receipts,omitempty"`
	// locked_height: the height when the batch was locked
	LockedHeight  uint64 `protobuf:"varint,10,opt,name=locked_height,json=lockedHeight,proto3" json:"locked_height,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DexBatch) Reset() {
	*x = DexBatch{}
	mi := &file_dex_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DexBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DexBatch) ProtoMessage() {}

func (x *DexBatch) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DexBatch.ProtoReflect.Descriptor instead.
func (*DexBatch) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{3}
}

func (x *DexBatch) GetCommittee() uint64 {
	if x != nil {
		return x.Committee
	}
	return 0
}

func (x *DexBatch) GetReceiptHash() []byte {
	if x != nil {
		return x.ReceiptHash
	}
	return nil
}

func (x *DexBatch) GetOrders() []*DexLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *DexBatch) GetDeposits() []*DexLiquidityDeposit {
	if x != nil {
		return x.Deposits
	}
	return nil
}

func (x *DexBatch) GetWithdraws() []*DexLiquidityWithdraw {
	if x != nil {
		return x.Withdraws
	}
	return nil
}

func (x *DexBatch) GetPoolSize() uint64 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

func (x *DexBatch) GetPoolPoints() []*PoolPoints {
	if x != nil {
		return x.PoolPoints
	}
	return nil
}

func (x *DexBatch) GetTotalPoolPoints() uint64 {
	if x != nil {
		return x.TotalPoolPoints
	}
	return 0
}

func (x *DexBatch) GetReceipts() []bool {
	if x != nil {
		return x.Receipts
	}
	return nil
}

func (x *DexBatch) GetLockedHeight() uint64 {
	if x != nil {
		return x.LockedHeight
	}
	return 0
}

// PoolPoints represents an ownership 'share' of the pool
type PoolPoints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// address: the recipient address of the points
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address"` // @gotags: json:"address"
	// points: the amount of points owned
	Points        uint64 `protobuf:"varint,2,opt,name=points,proto3" json:"points"` // @gotags: json:"points"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolPoints) Reset() {
	*x = PoolPoints{}
	mi := &file_dex_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolPoints) ProtoMessage() {}

func (x *PoolPoints) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolPoints.ProtoReflect.Descriptor instead.
func (*PoolPoints) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{4}
}

func (x *PoolPoints) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PoolPoints) GetPoints() uint64 {
	if x != nil {
		return x.Points
	}
	return 0
}

var File_dex_proto protoreflect.FileDescriptor

const file_dex_proto_rawDesc = "" +
	"\n" +
	"\tdex.proto\x12\x05types\"y\n" +
	"\rDexLimitOrder\x12$\n" +
	"\ramountForSale\x18\x01 \x01(\x04R\ramountForSale\x12(\n" +
	"\x0frequestedAmount\x18\x02 \x01(\x04R\x0frequestedAmount\x12\x18\n" +
	"\aaddress\x18\x03 \x01(\fR\aaddress\"G\n" +
	"\x13DexLiquidityDeposit\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x16\n" +
	"\x06amount\x18\x02 \x01(\x04R\x06amount\"J\n" +
	"\x14DexLiquidityWithdraw\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x18\n" +
	"\apercent\x18\x02 \x01(\x04R\apercent\"\xaa\x03\n" +
	"\bDexBatch\x12\x1c\n" +
	"\tCommittee\x18\x01 \x01(\x04R\tCommittee\x12!\n" +
	"\freceipt_hash\x18\x02 \x01(\fR\vreceiptHash\x12,\n" +
	"\x06orders\x18\x03 \x03(\v2\x14.types.DexLimitOrderR\x06orders\x126\n" +
	"\bdeposits\x18\x04 \x03(\v2\x1a.types.DexLiquidityDepositR\bdeposits\x129\n" +
	"\twithdraws\x18\x05 \x03(\v2\x1b.types.DexLiquidityWithdrawR\twithdraws\x12\x1b\n" +
	"\tpool_size\x18\x06 \x01(\x04R\bpoolSize\x122\n" +
	"\vpool_points\x18\a \x03(\v2\x11.types.PoolPointsR\n" +
	"poolPoints\x12*\n" +
	"\x11total_pool_points\x18\b \x01(\x04R\x0ftotalPoolPoints\x12\x1a\n" +
	"\breceipts\x18\t \x03(\bR\breceipts\x12#\n" +
	"\rlocked_height\x18\n" +
	" \x01(\x04R\flockedHeight\">\n" +
	"\n" +
	"PoolPoints\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x16\n" +
	"\x06points\x18\x02 \x01(\x04R\x06pointsB&Z$github.com/canopy-network/canopy/libb\x06proto3"

var (
	file_dex_proto_rawDescOnce sync.Once
	file_dex_proto_rawDescData []byte
)

func file_dex_proto_rawDescGZIP() []byte {
	file_dex_proto_rawDescOnce.Do(func() {
		file_dex_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dex_proto_rawDesc), len(file_dex_proto_rawDesc)))
	})
	return file_dex_proto_rawDescData
}

var file_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_dex_proto_goTypes = []any{
	(*DexLimitOrder)(nil),        // 0: types.DexLimitOrder
	(*DexLiquidityDeposit)(nil),  // 1: types.DexLiquidityDeposit
	(*DexLiquidityWithdraw)(nil), // 2: types.DexLiquidityWithdraw
	(*DexBatch)(nil),             // 3: types.DexBatch
	(*PoolPoints)(nil),           // 4: types.PoolPoints
}
var file_dex_proto_depIdxs = []int32{
	0, // 0: types.DexBatch.orders:type_name -> types.DexLimitOrder
	1, // 1: types.DexBatch.deposits:type_name -> types.DexLiquidityDeposit
	2, // 2: types.DexBatch.withdraws:type_name -> types.DexLiquidityWithdraw
	4, // 3: types.DexBatch.pool_points:type_name -> types.PoolPoints
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_dex_proto_init() }
func file_dex_proto_init() {
	if File_dex_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dex_proto_rawDesc), len(file_dex_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dex_proto_goTypes,
		DependencyIndexes: file_dex_proto_depIdxs,
		MessageInfos:      file_dex_proto_msgTypes,
	}.Build()
	File_dex_proto = out.File
	file_dex_proto_goTypes = nil
	file_dex_proto_depIdxs = nil
}
