In addition to the improvements identified in the issue description:

- Code Comments & Code Quality Practices
- Remote Procedure Call (RPC) Payload Structures
- Resource Management Issues in TimeMachine

Additional Observations noted or discussed:

- All RPC server functionality is contained within a single monolithic source file.
- Route definitions are currently stored as string literals, which affects the clarity of route configurations.
- Reliance on global variables for critical data elements such as database connections, controllers, and configuration settings.
- RPC server instantiates an RPC client to query itself resulting in tight coupling between the server and client types
- Database access requires consistent usage of `Discard` with `store.NewStoreWithDB` as well as the TimeMachine. While `Discard` is being correctly called after `Store` access, applying the same solution for TimeMachine may be beneficial here.
- The CLI tool utilizes `StringToCommittees`, but there exists a duplicate and similarly named function `stringToCommittees` within this package, potentially leading to confusion or future mistakes.

PR Order:

Phase One:

- Implement changes that do not alter logic or program flow.
- Refactor route configurations for improved clarity.
- Refactor code to eliminate global variables.
- Separate query and admin request handlers into distinct files, specifically `admin_handlers.go` and `query_handlers.go`.
- Add comments to affected sections of the code base.
- Refactor the startup logic to enhance clarity and maintainability.

The newly introduced `Server` type will encapsulate what were previously global
variables. Consequently, many functions have been converted into methods
associated with the `Server` type due to their reliance on these global variables.

These modifications will enhance the discoverability, usability  and clarity of canopy systems
and features.

Phase Two:

Resolve the issue of database transaction resource leaks.

Option 1:

Ensure `Discard` is properly called wherever necessary.

Option 2:

Introduce a new type that acts as a proxy or decorator for database access. This
abstraction layer would alleviate the RPC server from handling database access
intricacies and could facilitate additional features such as caching and data
transformations/aggregations.

Phase Three:

RPC/Tx request and response type refactor

- Investigate using struct embeds to split `txRequest` type similarly to the other request types

Future Considerations:

- Refactor to remove support/utility functions from the Server type, leaving only HTTP handlers or other directly relevant functions.
- Eliminate the use of the RPC client by the RPC server within the `pollChainInfo` process.
- Decouple client and server implementations and place them into separate packages.

- errors over to lib
- constants to server.go
