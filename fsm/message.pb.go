// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.31.1
// source: message.proto

package fsm

import (
	lib "github.com/canopy-network/canopy/lib"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *****************************************************************************************************
// This file is auto-generated from source files in `/lib/.proto/*` using Protocol Buffers (protobuf)
//
// Protobuf is a language-neutral, platform-neutral serialization format. It allows users
// to define objects in a way thatâ€™s both efficient to store and fast to transmit over the network.
// These definitions are compiled into code that *enables different systems and programming languages
// to communicate in a byte-perfect manner*
//
// To update these structures, make changes to the source .proto files, then recompile
// to regenerate this file.
// These auto-generated files are easily recognized by checking for a `.pb.go` ending
// *****************************************************************************************************
// _
// _
// _
// MessageSend is a standard transfer transaction, taking tokens from the sender and transferring
// them to the recipient
type MessageSend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// from_address: is the sender of the funds
	FromAddress []byte `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"` // @gotags: json:"fromAddress"
	// to_address: is the recipient of the funds
	ToAddress []byte `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"` // @gotags: json:"toAddress"
	// amount: is the amount of tokens in micro-denomination (uCNPY)
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *MessageSend) Reset() {
	*x = MessageSend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSend) ProtoMessage() {}

func (x *MessageSend) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSend.ProtoReflect.Descriptor instead.
func (*MessageSend) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *MessageSend) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *MessageSend) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *MessageSend) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// MessageStake is the Validator registration message, locking up a certain amount of tokens.
// Staking as a non-delegate is registering for active participation in the committee(s) consensus process(es),
// whereas delegate is passive participation that acts as a contribution to which committees are subsidized by the
// protocol. Either the operator or the sender may originate the stake transaction, but the funds are removed from
// the sender's account
type MessageStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public_key: the public cryptographic identity of the Validator operator that is unique to a users
	// secret private key
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"` // @gotags: json:"publicKey"
	// amount: is the amount of tokens to be removed from the sender account and locked as a surety bond against bad
	// behavior
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// committees: is the list of committees the validator is restaking their tokens towards
	Committees []uint64 `protobuf:"varint,3,rep,packed,name=committees,proto3" json:"committees,omitempty"`
	// net_address: is the tcp peer-to-peer address of the peer
	NetAddress string `protobuf:"bytes,4,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"` // @gotags: json:"netAddress"
	// output_address: is the short version of the public key where reward and unstaking funds will be distributed to
	OutputAddress []byte `protobuf:"bytes,5,opt,name=output_address,json=outputAddress,proto3" json:"output_address,omitempty"` // @gotags: json:"outputAddress"
	// delegate: signals whether the Validator is a delegate or not
	Delegate bool `protobuf:"varint,6,opt,name=delegate,proto3" json:"delegate,omitempty"`
	// compound: signals whether the Validator is auto-compounding or not
	Compound bool `protobuf:"varint,7,opt,name=compound,proto3" json:"compound,omitempty"`
	// signer: auto-populated by the state machine to assign the authorized signer who executed the transaction
	Signer []byte `protobuf:"bytes,8,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MessageStake) Reset() {
	*x = MessageStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStake) ProtoMessage() {}

func (x *MessageStake) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStake.ProtoReflect.Descriptor instead.
func (*MessageStake) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *MessageStake) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *MessageStake) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MessageStake) GetCommittees() []uint64 {
	if x != nil {
		return x.Committees
	}
	return nil
}

func (x *MessageStake) GetNetAddress() string {
	if x != nil {
		return x.NetAddress
	}
	return ""
}

func (x *MessageStake) GetOutputAddress() []byte {
	if x != nil {
		return x.OutputAddress
	}
	return nil
}

func (x *MessageStake) GetDelegate() bool {
	if x != nil {
		return x.Delegate
	}
	return false
}

func (x *MessageStake) GetCompound() bool {
	if x != nil {
		return x.Compound
	}
	return false
}

func (x *MessageStake) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

// MessageStake is the Validator modification message, it allows an increase locking up a certain amount of tokens,
// a change to the committees, the p2p address, the output address, and auto-compounding status
// To leave fields un-edited, simply use the previous value
type MessageEditStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address: the short version of the public key, acting as a unique identify linked to the Validator structure
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// amount: the updated amount of tokens being staked. This must be greater than or equal to the previous staked amount
	// The user's account balance is reduced by the difference between the old and new staked amounts
	// (old.Staked_Tokens - message.amount)
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// committees: the update to the committees the validator is restaking their tokens for
	Committees []uint64 `protobuf:"varint,3,rep,packed,name=committees,proto3" json:"committees,omitempty"`
	// net_address: the update to the tcp peer-to-peer address of the peer
	NetAddress string `protobuf:"bytes,4,opt,name=net_address,json=netAddress,proto3" json:"net_address,omitempty"` // @gotags: json:"netAddress"
	// output_address: the update to the reward address, only the output address may edit this
	OutputAddress []byte `protobuf:"bytes,5,opt,name=output_address,json=outputAddress,proto3" json:"output_address,omitempty"` // @gotags: json:"outputAddress"
	// compound: the update to the auto-compounding status
	Compound bool `protobuf:"varint,6,opt,name=compound,proto3" json:"compound,omitempty"`
	// signer: this field is needed so that the protocol may save the signer once they're identified by their public key
	// this is necessary because only the output address may edit the output field.
	Signer []byte `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *MessageEditStake) Reset() {
	*x = MessageEditStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEditStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEditStake) ProtoMessage() {}

func (x *MessageEditStake) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEditStake.ProtoReflect.Descriptor instead.
func (*MessageEditStake) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *MessageEditStake) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MessageEditStake) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MessageEditStake) GetCommittees() []uint64 {
	if x != nil {
		return x.Committees
	}
	return nil
}

func (x *MessageEditStake) GetNetAddress() string {
	if x != nil {
		return x.NetAddress
	}
	return ""
}

func (x *MessageEditStake) GetOutputAddress() []byte {
	if x != nil {
		return x.OutputAddress
	}
	return nil
}

func (x *MessageEditStake) GetCompound() bool {
	if x != nil {
		return x.Compound
	}
	return false
}

func (x *MessageEditStake) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

// MessageUnstake is the Validator leave message, it begins the process of a Validator exiting the network
// The block when the funds will be returned may be found in the Validator structure after submitting this transaction
type MessageUnstake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address: the short version of the public key, acting as a unique identify linked to the Validator structure
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *MessageUnstake) Reset() {
	*x = MessageUnstake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnstake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnstake) ProtoMessage() {}

func (x *MessageUnstake) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnstake.ProtoReflect.Descriptor instead.
func (*MessageUnstake) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *MessageUnstake) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// MessagePause is the Validator break message, it temporarily removes the Validator from active duty
// This allows operators a path to gracefully maintain their Validators without fully exiting
type MessagePause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address: the short version of the public key, acting as a unique identify linked to the Validator structure
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *MessagePause) Reset() {
	*x = MessagePause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessagePause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessagePause) ProtoMessage() {}

func (x *MessagePause) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessagePause.ProtoReflect.Descriptor instead.
func (*MessagePause) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *MessagePause) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// MessageUnpause is the Validator return message, it re-enlists the Validator to active duty
type MessageUnpause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address: the short version of the public key, acting as a unique identify linked to the Validator structure
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *MessageUnpause) Reset() {
	*x = MessageUnpause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUnpause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUnpause) ProtoMessage() {}

func (x *MessageUnpause) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUnpause.ProtoReflect.Descriptor instead.
func (*MessageUnpause) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *MessageUnpause) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// MessageChangeParameter is a governance proposal message used to modify a governance parameter
// This type of message must be manually pre-approved by +2/3rds of the Validators via their APPROVE_LIST
// In short, a 'proposer' generates the message JSON, communicates the JSON to Validators, Validators vote
// by populating their APPROVE_LIST which configures how they'll vote during the consensus process when a
// block includes this transaction in it.
type MessageChangeParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parameter_space: is the organization path where the parameter is found (val, cons, fee, gov)
	ParameterSpace string `protobuf:"bytes,1,opt,name=parameter_space,json=parameterSpace,proto3" json:"parameter_space,omitempty"` // @gotags: json:"parameterSpace"
	// parameter_key: is the name of the parameter
	ParameterKey string `protobuf:"bytes,2,opt,name=parameter_key,json=parameterKey,proto3" json:"parameter_key,omitempty"` // @gotags: json:"parameterKey"
	// parameter_value: is the uint64 or string value of the parameter
	ParameterValue *anypb.Any `protobuf:"bytes,3,opt,name=parameter_value,json=parameterValue,proto3" json:"parameter_value,omitempty"` // @gotags: json:"parameterValue"
	// start_height: is the beginning height where the parameter must be sent
	// this field locks in a block-range when it's converted to JSON and allows Validators a deadline to vote
	StartHeight uint64 `protobuf:"varint,4,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"` // @gotags: json:"startHeight"
	// end_height: is the ending height where the parameter must be sent
	// this field locks in a block-range when it's converted to JSON and allows Validators a deadline to vote
	EndHeight uint64 `protobuf:"varint,5,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"` // @gotags: json:"endHeight"
	// signer: is the address of the sender / creator of the proposal
	// this field locks in an author of the transaction when it's converted to JSON
	Signer []byte `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
	// proposal_hash: internal use only, tracks the hash of the proposal to check against the proposals.json file
	ProposalHash string `protobuf:"bytes,7,opt,name=proposal_hash,json=proposalHash,proto3" json:"proposal_hash,omitempty"` // @gotags: json:"proposalHash"
}

func (x *MessageChangeParameter) Reset() {
	*x = MessageChangeParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageChangeParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageChangeParameter) ProtoMessage() {}

func (x *MessageChangeParameter) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageChangeParameter.ProtoReflect.Descriptor instead.
func (*MessageChangeParameter) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *MessageChangeParameter) GetParameterSpace() string {
	if x != nil {
		return x.ParameterSpace
	}
	return ""
}

func (x *MessageChangeParameter) GetParameterKey() string {
	if x != nil {
		return x.ParameterKey
	}
	return ""
}

func (x *MessageChangeParameter) GetParameterValue() *anypb.Any {
	if x != nil {
		return x.ParameterValue
	}
	return nil
}

func (x *MessageChangeParameter) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *MessageChangeParameter) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *MessageChangeParameter) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *MessageChangeParameter) GetProposalHash() string {
	if x != nil {
		return x.ProposalHash
	}
	return ""
}

// MessageDAOTransfer is a governance proposal message used to send funds from the DAO pool to an account
// This type of message must be manually pre-approved by +2/3rds of the Validators via their APPROVE_LIST
// In short, a 'proposer' generates the message JSON, communicates the JSON to Validators, Validators vote
// by populating their APPROVE_LIST which configures how they'll vote during the consensus process when a
// block includes this transaction in it.
type MessageDAOTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address: is the recipient address and sender of this message
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// amount: is the amount of
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// start_height: is the beginning height where the parameter must be sent
	// this field locks in a block-range when it's converted to JSON and allows Validators a deadline to vote
	StartHeight uint64 `protobuf:"varint,4,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"` // @gotags: json:"startHeight"
	// end_height: is the ending height where the parameter must be sent
	// this field locks in a block-range when it's converted to JSON and allows Validators a deadline to vote
	EndHeight uint64 `protobuf:"varint,5,opt,name=end_height,json=endHeight,proto3" json:"end_height,omitempty"` // @gotags: json:"startHeight"
	// proposal_hash: internal use only, tracks the hash of the proposal to check against the proposals.json file
	ProposalHash string `protobuf:"bytes,6,opt,name=proposal_hash,json=proposalHash,proto3" json:"proposal_hash,omitempty"` // @gotags: json:"proposalHash"
}

func (x *MessageDAOTransfer) Reset() {
	*x = MessageDAOTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDAOTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDAOTransfer) ProtoMessage() {}

func (x *MessageDAOTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDAOTransfer.ProtoReflect.Descriptor instead.
func (*MessageDAOTransfer) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *MessageDAOTransfer) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MessageDAOTransfer) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MessageDAOTransfer) GetStartHeight() uint64 {
	if x != nil {
		return x.StartHeight
	}
	return 0
}

func (x *MessageDAOTransfer) GetEndHeight() uint64 {
	if x != nil {
		return x.EndHeight
	}
	return 0
}

func (x *MessageDAOTransfer) GetProposalHash() string {
	if x != nil {
		return x.ProposalHash
	}
	return ""
}

// MessageCertificateResults is a summary from the Leader of a recently completed BFT process in the form of a Quorum
// Certificate signed by a super-majority of the committee members at a given height.
// This message defines committee treasury pool recipients, slash recipients, sell orders actions, and checkpoints
type MessageCertificateResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// qc: a super-majority signed quorum certificate from a recently completed BFT process (COMMIT_PROCESS phase)
	Qc *lib.QuorumCertificate `protobuf:"bytes,1,opt,name=qc,proto3" json:"qc,omitempty"`
}

func (x *MessageCertificateResults) Reset() {
	*x = MessageCertificateResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCertificateResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCertificateResults) ProtoMessage() {}

func (x *MessageCertificateResults) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCertificateResults.ProtoReflect.Descriptor instead.
func (*MessageCertificateResults) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *MessageCertificateResults) GetQc() *lib.QuorumCertificate {
	if x != nil {
		return x.Qc
	}
	return nil
}

// MessageSubsidy is an account to committee treasury pool transfer transaction
// At economic maturity without inflation, this is how the network continues to offer its Validation services
type MessageSubsidy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address: is the sender of the funds
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// chain_id: is the id of the committee the funds are being sent to
	ChainId uint64 `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"` // @gotags: json:"chainID"
	// amount: is the amount of funds that are taken from the sender and transferred to the recipient pool
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// opcode: a generic code field to allow fund designation instructions
	Opcode []byte `protobuf:"bytes,4,opt,name=opcode,proto3" json:"opcode,omitempty"`
}

func (x *MessageSubsidy) Reset() {
	*x = MessageSubsidy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSubsidy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSubsidy) ProtoMessage() {}

func (x *MessageSubsidy) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSubsidy.ProtoReflect.Descriptor instead.
func (*MessageSubsidy) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *MessageSubsidy) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *MessageSubsidy) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *MessageSubsidy) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *MessageSubsidy) GetOpcode() []byte {
	if x != nil {
		return x.Opcode
	}
	return nil
}

// MessageCreateOrder creates a new token swap 'sell order', removing tokens from the sender
// account and transferring them to an escrow pool while awaiting a buyer
type MessageCreateOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// chain_id: the id of the committee that is responsible for the 'counter asset' the uCNPY will swapped for
	ChainId uint64 `protobuf:"varint,1,opt,name=ChainId,proto3" json:"ChainId,omitempty"` // @gotags: json:"chainID"
	// data: a generic data field which can allow a committee to execute specific functionality for the swap
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // @gotags: json:"data"
	// amount_for_sale: the amount of uCNPY listed for sale, transferred to escrow
	AmountForSale uint64 `protobuf:"varint,3,opt,name=AmountForSale,proto3" json:"AmountForSale,omitempty"` // @gotags: json:"amountForSale"
	// requested_amount: the amount of the 'counter asset' the buyer must send in order to complete a swap
	RequestedAmount uint64 `protobuf:"varint,4,opt,name=RequestedAmount,proto3" json:"RequestedAmount,omitempty"` // @gotags: json:"requestAmount"
	// sellers_receive_address: the address of the seller where the 'counter asset' will be received
	SellerReceiveAddress []byte `protobuf:"bytes,5,opt,name=SellerReceiveAddress,proto3" json:"SellerReceiveAddress,omitempty"` // @gotags: json:"sellerReceiveAddress"
	// sellers_send_address: the Canopy address the seller is selling and signing from
	SellersSendAddress []byte `protobuf:"bytes,6,opt,name=SellersSendAddress,proto3" json:"SellersSendAddress,omitempty"` // @gotags: json:"sellersSendAddress"
	// OrderId: auto-populated by the state machine to assign the unique bytes to the order
	OrderId []byte `protobuf:"bytes,7,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
}

func (x *MessageCreateOrder) Reset() {
	*x = MessageCreateOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCreateOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCreateOrder) ProtoMessage() {}

func (x *MessageCreateOrder) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCreateOrder.ProtoReflect.Descriptor instead.
func (*MessageCreateOrder) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *MessageCreateOrder) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *MessageCreateOrder) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MessageCreateOrder) GetAmountForSale() uint64 {
	if x != nil {
		return x.AmountForSale
	}
	return 0
}

func (x *MessageCreateOrder) GetRequestedAmount() uint64 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *MessageCreateOrder) GetSellerReceiveAddress() []byte {
	if x != nil {
		return x.SellerReceiveAddress
	}
	return nil
}

func (x *MessageCreateOrder) GetSellersSendAddress() []byte {
	if x != nil {
		return x.SellersSendAddress
	}
	return nil
}

func (x *MessageCreateOrder) GetOrderId() []byte {
	if x != nil {
		return x.OrderId
	}
	return nil
}

// MessageEditOrder modifies an un-claimed token swap 'sell order', token amount may be increased or decreased as well
// as the recipient address
// If an order is already 'claimed' or 'bought', the order may not be modified
type MessageEditOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order_id: is the number id that is unique to this committee to identify the order
	// not modifiable, used for order identification only
	OrderId []byte `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"` // @gotags: json:"orderID"
	// chain_id: the id of the committee that is responsible for the 'counter asset' the uCNPY will swapped for
	// not modifiable, used for order identification only
	ChainId uint64 `protobuf:"varint,2,opt,name=ChainId,proto3" json:"ChainId,omitempty"` // @gotags: json:"chainID"
	// data: a generic data field which can allow a committee to execute specific functionality for the swap
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // @gotags: json:"data"
	// amount_for_sale: the updated amount of uCNPY listed for sale, a reduction will return escrowed tokens to the seller's
	// send address
	AmountForSale uint64 `protobuf:"varint,4,opt,name=AmountForSale,proto3" json:"AmountForSale,omitempty"` // @gotags: json:"amountForSale"
	// requested_amount: the updated amount of the 'counter asset' the buyer must send in order to complete a swap
	RequestedAmount uint64 `protobuf:"varint,5,opt,name=RequestedAmount,proto3" json:"RequestedAmount,omitempty"` // @gotags: json:"requestedAmount"
	// sellers_receive_address: the address of the seller where the 'counter asset' will be received
	SellerReceiveAddress []byte `protobuf:"bytes,6,opt,name=SellerReceiveAddress,proto3" json:"SellerReceiveAddress,omitempty"` // @gotags: json:"sellerReceiveAddress"
}

func (x *MessageEditOrder) Reset() {
	*x = MessageEditOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEditOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEditOrder) ProtoMessage() {}

func (x *MessageEditOrder) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEditOrder.ProtoReflect.Descriptor instead.
func (*MessageEditOrder) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *MessageEditOrder) GetOrderId() []byte {
	if x != nil {
		return x.OrderId
	}
	return nil
}

func (x *MessageEditOrder) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *MessageEditOrder) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *MessageEditOrder) GetAmountForSale() uint64 {
	if x != nil {
		return x.AmountForSale
	}
	return 0
}

func (x *MessageEditOrder) GetRequestedAmount() uint64 {
	if x != nil {
		return x.RequestedAmount
	}
	return 0
}

func (x *MessageEditOrder) GetSellerReceiveAddress() []byte {
	if x != nil {
		return x.SellerReceiveAddress
	}
	return nil
}

// MessageDeleteOrder: deletes an un-claimed token swap 'sell order'
// If an order is already 'claimed' or 'bought', the order may not be deleted
type MessageDeleteOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order_id: is the number id that is unique to this committee to identify the order
	OrderId []byte `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"` // @gotags: json:"orderID"
	// chain_id: the id of the committee that is responsible for the 'counter asset' the uCNPY will swapped for
	ChainId uint64 `protobuf:"varint,2,opt,name=ChainId,proto3" json:"ChainId,omitempty"` // @gotags: json:"chainID"
}

func (x *MessageDeleteOrder) Reset() {
	*x = MessageDeleteOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageDeleteOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageDeleteOrder) ProtoMessage() {}

func (x *MessageDeleteOrder) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageDeleteOrder.ProtoReflect.Descriptor instead.
func (*MessageDeleteOrder) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *MessageDeleteOrder) GetOrderId() []byte {
	if x != nil {
		return x.OrderId
	}
	return nil
}

func (x *MessageDeleteOrder) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

// Coin represents a token amount with denomination
type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// denom: the denomination of the token
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// amount: the amount of tokens
	Amount uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *Coin) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Coin) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// MessageStoreCode uploads and compiles WASM bytecode
type MessageStoreCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sender: the address uploading the code
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// wasm_byte_code: the WASM bytecode to store
	WasmByteCode []byte `protobuf:"bytes,2,opt,name=wasm_byte_code,json=wasmByteCode,proto3" json:"wasm_byte_code,omitempty"` // @gotags: json:"wasmByteCode"
}

func (x *MessageStoreCode) Reset() {
	*x = MessageStoreCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStoreCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStoreCode) ProtoMessage() {}

func (x *MessageStoreCode) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStoreCode.ProtoReflect.Descriptor instead.
func (*MessageStoreCode) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *MessageStoreCode) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageStoreCode) GetWasmByteCode() []byte {
	if x != nil {
		return x.WasmByteCode
	}
	return nil
}

// MessageInstantiateContract creates a new contract instance
type MessageInstantiateContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sender: the address creating the contract instance
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// admin: optional admin address for the contract
	Admin []byte `protobuf:"bytes,2,opt,name=admin,proto3" json:"admin,omitempty"`
	// code_id: the ID of the stored WASM code
	CodeId uint64 `protobuf:"varint,3,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"` // @gotags: json:"codeId"
	// label: human-readable label for this contract
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// msg: JSON-encoded instantiation message
	Msg []byte `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	// funds: coins sent to the contract during instantiation
	Funds []*Coin `protobuf:"bytes,6,rep,name=funds,proto3" json:"funds,omitempty"`
}

func (x *MessageInstantiateContract) Reset() {
	*x = MessageInstantiateContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageInstantiateContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageInstantiateContract) ProtoMessage() {}

func (x *MessageInstantiateContract) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageInstantiateContract.ProtoReflect.Descriptor instead.
func (*MessageInstantiateContract) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *MessageInstantiateContract) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageInstantiateContract) GetAdmin() []byte {
	if x != nil {
		return x.Admin
	}
	return nil
}

func (x *MessageInstantiateContract) GetCodeId() uint64 {
	if x != nil {
		return x.CodeId
	}
	return 0
}

func (x *MessageInstantiateContract) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *MessageInstantiateContract) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *MessageInstantiateContract) GetFunds() []*Coin {
	if x != nil {
		return x.Funds
	}
	return nil
}

// MessageExecuteContract executes a message on an existing contract
type MessageExecuteContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sender: the address executing the contract
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// contract: the address of the contract to execute
	Contract []byte `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	// msg: JSON-encoded execution message
	Msg []byte `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	// funds: coins sent to the contract during execution
	Funds []*Coin `protobuf:"bytes,4,rep,name=funds,proto3" json:"funds,omitempty"`
}

func (x *MessageExecuteContract) Reset() {
	*x = MessageExecuteContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageExecuteContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageExecuteContract) ProtoMessage() {}

func (x *MessageExecuteContract) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageExecuteContract.ProtoReflect.Descriptor instead.
func (*MessageExecuteContract) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *MessageExecuteContract) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageExecuteContract) GetContract() []byte {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *MessageExecuteContract) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *MessageExecuteContract) GetFunds() []*Coin {
	if x != nil {
		return x.Funds
	}
	return nil
}

// MessageMigrateContract updates a contract to a new code version
type MessageMigrateContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sender: the address performing the migration (must be admin)
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// contract: the address of the contract to migrate
	Contract []byte `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	// code_id: the new code ID to migrate to
	CodeId uint64 `protobuf:"varint,3,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"` // @gotags: json:"codeId"
	// msg: JSON-encoded migration message
	Msg []byte `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *MessageMigrateContract) Reset() {
	*x = MessageMigrateContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageMigrateContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageMigrateContract) ProtoMessage() {}

func (x *MessageMigrateContract) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageMigrateContract.ProtoReflect.Descriptor instead.
func (*MessageMigrateContract) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{17}
}

func (x *MessageMigrateContract) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageMigrateContract) GetContract() []byte {
	if x != nil {
		return x.Contract
	}
	return nil
}

func (x *MessageMigrateContract) GetCodeId() uint64 {
	if x != nil {
		return x.CodeId
	}
	return 0
}

func (x *MessageMigrateContract) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

// MessageUpdateAdmin updates the admin of a contract
type MessageUpdateAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sender: the current admin address
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// new_admin: the new admin address
	NewAdmin []byte `protobuf:"bytes,2,opt,name=new_admin,json=newAdmin,proto3" json:"new_admin,omitempty"` // @gotags: json:"newAdmin"
	// contract: the address of the contract
	Contract []byte `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *MessageUpdateAdmin) Reset() {
	*x = MessageUpdateAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageUpdateAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageUpdateAdmin) ProtoMessage() {}

func (x *MessageUpdateAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageUpdateAdmin.ProtoReflect.Descriptor instead.
func (*MessageUpdateAdmin) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{18}
}

func (x *MessageUpdateAdmin) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageUpdateAdmin) GetNewAdmin() []byte {
	if x != nil {
		return x.NewAdmin
	}
	return nil
}

func (x *MessageUpdateAdmin) GetContract() []byte {
	if x != nil {
		return x.Contract
	}
	return nil
}

// MessageClearAdmin removes the admin from a contract
type MessageClearAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sender: the current admin address
	Sender []byte `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// contract: the address of the contract
	Contract []byte `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *MessageClearAdmin) Reset() {
	*x = MessageClearAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageClearAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageClearAdmin) ProtoMessage() {}

func (x *MessageClearAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageClearAdmin.ProtoReflect.Descriptor instead.
func (*MessageClearAdmin) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{19}
}

func (x *MessageClearAdmin) GetSender() []byte {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MessageClearAdmin) GetContract() []byte {
	if x != nil {
		return x.Contract
	}
	return nil
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x01,
	0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xe0, 0x01,
	0x0a, 0x10, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72,
	0x22, 0x2a, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x28, 0x0a, 0x0c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2a, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x55, 0x6e, 0x70, 0x61, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0xad, 0x01, 0x0a, 0x12, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x41, 0x4f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x22, 0x45, 0x0a, 0x19, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x71, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x51, 0x75, 0x6f, 0x72, 0x75,
	0x6d, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x02, 0x71, 0x63,
	0x22, 0x75, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x69,
	0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61,
	0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x53, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x53, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x53, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x50, 0x0a, 0x10, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x73, 0x6d, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x77, 0x61, 0x73, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xae, 0x01,
	0x0a, 0x1a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x22, 0x81,
	0x01, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x21, 0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x66, 0x75, 0x6e,
	0x64, 0x73, 0x22, 0x77, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x65, 0x0a, 0x12, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x22, 0x47, 0x0a, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x42, 0x26, 0x5a, 0x24, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x61, 0x6e, 0x6f, 0x70, 0x79,
	0x2d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x61, 0x6e, 0x6f, 0x70, 0x79, 0x2f,
	0x66, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_message_proto_goTypes = []any{
	(*MessageSend)(nil),                // 0: types.MessageSend
	(*MessageStake)(nil),               // 1: types.MessageStake
	(*MessageEditStake)(nil),           // 2: types.MessageEditStake
	(*MessageUnstake)(nil),             // 3: types.MessageUnstake
	(*MessagePause)(nil),               // 4: types.MessagePause
	(*MessageUnpause)(nil),             // 5: types.MessageUnpause
	(*MessageChangeParameter)(nil),     // 6: types.MessageChangeParameter
	(*MessageDAOTransfer)(nil),         // 7: types.MessageDAOTransfer
	(*MessageCertificateResults)(nil),  // 8: types.MessageCertificateResults
	(*MessageSubsidy)(nil),             // 9: types.MessageSubsidy
	(*MessageCreateOrder)(nil),         // 10: types.MessageCreateOrder
	(*MessageEditOrder)(nil),           // 11: types.MessageEditOrder
	(*MessageDeleteOrder)(nil),         // 12: types.MessageDeleteOrder
	(*Coin)(nil),                       // 13: types.Coin
	(*MessageStoreCode)(nil),           // 14: types.MessageStoreCode
	(*MessageInstantiateContract)(nil), // 15: types.MessageInstantiateContract
	(*MessageExecuteContract)(nil),     // 16: types.MessageExecuteContract
	(*MessageMigrateContract)(nil),     // 17: types.MessageMigrateContract
	(*MessageUpdateAdmin)(nil),         // 18: types.MessageUpdateAdmin
	(*MessageClearAdmin)(nil),          // 19: types.MessageClearAdmin
	(*anypb.Any)(nil),                  // 20: google.protobuf.Any
	(*lib.QuorumCertificate)(nil),      // 21: types.QuorumCertificate
}
var file_message_proto_depIdxs = []int32{
	20, // 0: types.MessageChangeParameter.parameter_value:type_name -> google.protobuf.Any
	21, // 1: types.MessageCertificateResults.qc:type_name -> types.QuorumCertificate
	13, // 2: types.MessageInstantiateContract.funds:type_name -> types.Coin
	13, // 3: types.MessageExecuteContract.funds:type_name -> types.Coin
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MessageSend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*MessageStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MessageEditStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MessageUnstake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*MessagePause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MessageUnpause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MessageChangeParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*MessageDAOTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MessageCertificateResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MessageSubsidy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MessageCreateOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MessageEditOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MessageDeleteOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MessageStoreCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*MessageInstantiateContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MessageExecuteContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*MessageMigrateContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*MessageUpdateAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*MessageClearAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
